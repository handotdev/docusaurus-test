'use strict';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var path = require("path");

module.exports = function (context) {
  var siteConfig = context.siteConfig;
  var themeConfig = siteConfig.themeConfig;

  var _ref = themeConfig || {},
      posthog = _ref.posthog;

  if (!posthog) {
    throw new Error("You need to specify 'posthog' object in 'themeConfig' with 'apiKey' field in it to use posthog-docusaurus");
  }

  var apiKey = posthog.apiKey,
      _posthog$appUrl = posthog.appUrl,
      appUrl = _posthog$appUrl === void 0 ? "https://app.posthog.com" : _posthog$appUrl,
      _posthog$enableInDeve = posthog.enableInDevelopment,
      enableInDevelopment = _posthog$enableInDeve === void 0 ? false : _posthog$enableInDeve,
      rest = _objectWithoutPropertiesLoose(posthog, ["apiKey", "appUrl", "enableInDevelopment"]);

  if (!apiKey) {
    throw new Error("You specified the `posthog` object in `themeConfig` but the `apiKey` field was missing. " + "Please ensure this is not a mistake.");
  }

  var posthogEnabled = process.env.NODE_ENV === "production" || enableInDevelopment;
  return {
    name: "posthog-docusaurus",
    getClientModules: function getClientModules() {
      return posthogEnabled ? [path.resolve(__dirname, "./posthog")] : [];
    },
    injectHtmlTags: function injectHtmlTags() {
      if (!posthogEnabled) {
        return {};
      }

      var options = _extends({
        api_host: appUrl
      }, rest);

      return {
        headTags: [{
          tagName: "link",
          attributes: {
            rel: "preconnect",
            href: appUrl
          }
        }, {
          tagName: "script",
          innerHTML: "\n              !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(\".\");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement(\"script\")).type=\"text/javascript\",p.async=!0,p.src=s.api_host+\"/static/array.js\",(r=t.getElementsByTagName(\"script\")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a=\"posthog\",u.people=u.people||[],u.toString=function(t){var e=\"posthog\";return\"posthog\"!==a&&(e+=\".\"+a),t||(e+=\" (stub)\"),e},u.people.toString=function(){return u.toString(1)+\".people (stub)\"},o=\"capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset\".split(\" \"),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);\n              posthog.init(" + JSON.stringify(apiKey) + ", " + JSON.stringify(options) + ")\n            "
        }]
      };
    }
  };
};
